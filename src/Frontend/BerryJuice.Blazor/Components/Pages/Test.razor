@page "/test"
@using Accounts.Application.AccountService
@using Accounts.Application.AccountService.Commands
@using Accounts.Application.AccountService.Models
@using Accounts.Application.AccountService.Queries
@using Accounts.Application.TransactionService
@using Accounts.Application.TransactionService.Models
@using Accounts.Application.TransactionService.Queries
@using Primitives.EventBusScopedWrapper
@inject IEventBusWrapper _eventBus
@rendermode InteractiveServer

<PageTitle>Test</PageTitle>

<MudContainer>
    <MudText Typo="Typo.h1">Test</MudText>
    <MudDivider />

    <MudText Typo="Typo.h2">Test Get Accounts</MudText>

    <MudList T="(AccountModel, List<TransactionModel>)">
        @foreach (var account in Accounts)
        {
            <MudListItem>
                <MudText>@account.Item1.Description</MudText>
                <MudList T="TransactionModel">
                    <MudListItem>id: @account.Item1.Id</MudListItem>
                    <MudListItem>
                        Transactions:
                        <MudList T="TransactionModel">
                            @foreach (var transaction in account.Item2)
                            {
                                <MudListItem>
                                    <MudText>@transaction.Description</MudText>
                                    <MudList T="string">
                                        <MudListItem>id: @transaction.TransactionId</MudListItem>
                                        <MudListItem>amount: @transaction.Amount</MudListItem>
                                        <MudListItem>
                                            Tag:
                                            @foreach (var tag in transaction.Tags)
                                            {
                                                <MudChip>@tag.TagName</MudChip>
                                            }
                                        </MudListItem>
                                    </MudList>
                                </MudListItem>
                            }
                        </MudList>
                    </MudListItem>
                </MudList>
            </MudListItem>
        }
    </MudList>

    <MudButton OnClick="TestGetAccounts" Color="Color.Primary">Query Button</MudButton>
    <MudButton OnClick="TestAddAccount" Color="Color.Secondary">Add a new account with random name</MudButton>
</MudContainer>

@code {
    public int Query { get; set; } = -1;

    public List<(AccountModel, List<TransactionModel>)> Accounts { get; set; } = new();

    private async Task TestGetAccounts(MouseEventArgs e)
    {
        var query = new GetAccountsQuery();
        var result = await _eventBus.QueryAsync(query);

        var accounts = new List<(AccountModel, List<TransactionModel>)>();

        foreach (var account in result.Accounts)
        {
            var transactionsQuery = new GetTransactionsQuery(account.Id);
            var transactions = await _eventBus.QueryAsync(transactionsQuery);
            accounts.Add((account, transactions.Transactions.ToList()));
        }

        await InvokeAsync(workItem: () => Accounts = accounts);
    }

    private async Task TestAddAccount(MouseEventArgs e)
    {
        var command = new CreateAccountCommand(description: "Random Account");
        var result = await _eventBus.CommandAsync(command);
    }
}
