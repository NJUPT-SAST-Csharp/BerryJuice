@page "/test"
@using Accounts.Application.AccountService
@using Accounts.Application.AccountService.GetAccounts
@using Accounts.Application.TestService.GetTest
@using Primitives.EventBusScopedWrapper
@using Accounts.Application
@inject IEventBusWrapper _eventBus
@rendermode InteractiveServer

<PageTitle>Test</PageTitle>

<h1>Test</h1>
<hr />
@if(Query == -1)
{
    <p>Click the button to query the server</p>
}
else
{
    <p>Query result is: @Query</p>
}
<button @onclick="TestQuery" >Query Button</button>

<hr/>

<h2>Test Get Accounts</h2>

<ul>
    @foreach (var account in Accounts)
    {
        <li>
            @account.Description
            <ul>
                id: @account.Id
            </ul>
        </li>
    }
</ul>

<button @onclick="TestGetAccounts">Query Button</button>
@code {
    public int Query { get; set; } = -1;

    public List<AccountDto> Accounts { get; set; } = new List<AccountDto>();

    private async void TestQuery(MouseEventArgs e)
    {
        var query = new TestQuery();
        var result = await _eventBus.QueryAsync<int>(query);

        await InvokeAsync(
            () => Query = result
        );

    }
    private async Task TestGetAccounts(MouseEventArgs e)
    {
        var query = new GetAccountsQuery();
        var result = await _eventBus.QueryAsync<IEnumerable<AccountDto>>(query);

        await InvokeAsync(
            () => Accounts = result.ToList()
        );

    }
}
