@page "/test"
@using Accounts.Application.AccountService
@using Accounts.Application.AccountService.CreateAccount
@using Accounts.Application.AccountService.GetAccounts
@using Accounts.Application.TestService.GetTest
@using Accounts.Application.TransactionService
@using Accounts.Application.TransactionService.GetTransactions
@using Primitives.EventBusScopedWrapper
@using Accounts.Application
@inject IEventBusWrapper _eventBus
@rendermode InteractiveServer

<PageTitle>Test</PageTitle>

<h1>Test</h1>

<hr />

<h2>Test Get Accounts</h2>

<ul>
    @foreach (var account in Accounts)
    {
        <li>
            @account.Item1.Description
            <ul>
                id: @account.Item1.Id
                Transactions:
                @foreach (var transaction in account.Item2)
                {
                    <li>
                        @transaction.Description
                        <ul>
                            id: @transaction.TransactionId
                            amount: @transaction.Amount
                            Tag:
                            @foreach (var tag in transaction.Tags)
                            {
                                @tag.TagName
                            }
                        </ul>
                    </li>
                }
            </ul>
        </li>
    }
</ul>

<button @onclick="TestGetAccounts">Query Button</button>

<button @onclick="TestAddAccount">Add a new account with random name</button>
@code {
    public int Query { get; set; } = -1;

    public List<(AccountDto, List<TransactionDto>)> Accounts { get; set; } = new();

    private async Task TestGetAccounts(MouseEventArgs e)
    {
        var query = new GetAccountsQuery();
        var result = await _eventBus.QueryAsync<IEnumerable<AccountDto>>(query);

        var accounts = new List<(AccountDto, List<TransactionDto>)>();

        foreach(var account in result)
        {
            var transactionsQuery = new GetTransactionsQuery(account.Id);
            var transactions = await _eventBus.QueryAsync<IEnumerable<TransactionDto>>(transactionsQuery);
            accounts.Add((account, transactions.ToList()));
        }

        await InvokeAsync(
            () => Accounts = accounts
        );


    }
    private async Task TestAddAccount(MouseEventArgs e)
    {
        var command = new CreateAccountCommand("Random Account");
        var result = await _eventBus.CommandAsync(command);
    }
}
