@page "/weather"
@using EventBus
@using Accounts.Application
@inject IEventBusWrapper _eventBus
@rendermode InteractiveServer
@attribute [StreamRendering]

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates showing data.</p>

@if ( forecasts == null )
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach ( var forecast in forecasts )
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

<h2>Test Query:</h2>
<p>@queryResult</p>
<button class="btn btn-primary" @onclick="UpdateQueryResult">Click me</button>

@code {
    private WeatherForecast[]? forecasts;

    private int queryResult;

    protected override async Task OnInitializedAsync ( )
    {
        queryResult = await _eventBus.QueryAsync<int>(new TestQuery(114514));

        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(500);

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
        forecasts = Enumerable.Range(1, 5).Select(index => new WeatherForecast
            {
                Date = startDate.AddDays(index),
                TemperatureC = Random.Shared.Next(-20, 55),
                Summary = summaries[Random.Shared.Next(summaries.Length)]
            }).ToArray();

    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }

    private async void UpdateQueryResult ( )
    {

        var q = await _eventBus.QueryAsync<int>(new TestQuery(1919810));
        await InvokeAsync(( ) =>
        {
            queryResult = q;
            StateHasChanged();
        });
    }
}
