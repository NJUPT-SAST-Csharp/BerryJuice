// <auto-generated />
using System;
using System.Collections.Generic;
using Accounts.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Accounts.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(AccountsContext))]
    [Migration("20240826183722_AccountsInitial")]
    partial class AccountsInitial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("BJAccounts")
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Accounts.Domain.AccountAggregate.AccountEntity.Account", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<string>("_description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.HasKey("Id")
                        .HasName("pk_accounts");

                    b.ToTable("accounts", "BJAccounts");
                });

            modelBuilder.Entity("Accounts.Domain.AccountAggregate.TransactionEntity.Transaction", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<long?>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_id");

                    b.Property<DateTime>("_createdAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("_description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.ComplexProperty<Dictionary<string, object>>("_amount", "Accounts.Domain.AccountAggregate.TransactionEntity.Transaction._amount#TransactionAmount", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric")
                                .HasColumnName("amount");

                            b1.Property<int>("Currency")
                                .HasColumnType("integer")
                                .HasColumnName("currency");
                        });

                    b.HasKey("Id")
                        .HasName("pk_transactions");

                    b.HasIndex("AccountId")
                        .HasDatabaseName("ix_transactions_account_id");

                    b.ToTable("transactions", "BJAccounts");
                });

            modelBuilder.Entity("Accounts.Domain.TagEntity.Tag", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<string>("_name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_tags");

                    b.ToTable("tags", "BJAccounts");
                });

            modelBuilder.Entity("TransactionTag", b =>
                {
                    b.Property<long>("TransactionId")
                        .HasColumnType("bigint")
                        .HasColumnName("transaction_id");

                    b.Property<long>("TagId")
                        .HasColumnType("bigint")
                        .HasColumnName("tag_id");

                    b.HasKey("TransactionId", "TagId")
                        .HasName("pk_transactions_tags");

                    b.HasIndex("TagId")
                        .HasDatabaseName("ix_transactions_tags_tag_id");

                    b.ToTable("transactions_tags", "BJAccounts");
                });

            modelBuilder.Entity("Accounts.Domain.AccountAggregate.TransactionEntity.Transaction", b =>
                {
                    b.HasOne("Accounts.Domain.AccountAggregate.AccountEntity.Account", null)
                        .WithMany("_transactions")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("fk_transactions_accounts_account_id");
                });

            modelBuilder.Entity("TransactionTag", b =>
                {
                    b.HasOne("Accounts.Domain.TagEntity.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_transactions_tags_tags_tag_id");

                    b.HasOne("Accounts.Domain.AccountAggregate.TransactionEntity.Transaction", null)
                        .WithMany()
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_transactions_tags_transactions_transaction_id");
                });

            modelBuilder.Entity("Accounts.Domain.AccountAggregate.AccountEntity.Account", b =>
                {
                    b.Navigation("_transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
